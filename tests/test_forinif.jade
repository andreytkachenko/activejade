mixin button(title)
    button.button.button-normal= title

mixin checkbox(title, model)
    label
        @on('change', model=this.value)
        @prop('checked', model)
        input(type="checkbox"): span
        em= title
        block

mixin activity-preview(style, size, id)
    pass

.swimlane-dialog
    @on('click', $close())
    a.close
    
    h1 Permutations
    
    .subtitle
        .right Displaying top #{ctrl.data.length} permutations
        .left Possible permutations in the sequencing of the selected activities ordered by their number of occurrences
    
    .main
        .top
            @on('click', ctrl.openActivitiesModal())
            +button("Add activity")
            
        .header
            .check-all
                +checkbox('All', ctrl.all.checked)
            
            .header-scroller
                @var('$horizontal')
                ul.columns(style={width: "#{ctrl.count * ctrl.arrowDist}px"})
                    for idx, occ in ctrl.data
                        li(title="#{occ.count} timelines (#{occ.portion}%)") #{occ.count} timelines (#{occ.portion}%)
        
        .main-wrapper
            .event-selector
                @var('$vertical')
                ul
                    for idx, line in ctrl.activities
                        li
                            +checkbox(line.name, line.checked)
                                +activity-preview(line.style, 'small', line.id)
            
            @on('scroll', ($vertical.$.style.top=(-this.scrollTop)+'px') && ($horizontal.$.style.left=(-this.scrollLeft)+'px') )
            .scrollable: .chart
                .wrapper(style={width: "#{ctrl.count * ctrl.arrowDist}px"})
                    svg.swimlane-svg(width="100%", height="!{(ctrl.activities.length - 1) * ctrl.laneWidth + 10}")
                        defs
                            marker#arrow-head(orient="auto" markerWidth="8" markerHeight="8" refX="8" refY="4")
                                path.arrow-head-marker(d="M0,0 V8 L8,4 Z")
                            
                            marker#arrow-tail(orient="auto" markerWidth="8" markerHeight="8" refX="4" refY="4")
                                circle.arrow-tail-marker(cx="4" cy="4" r="3")

                        g(style="transform: translateY(5px)")
                            g
                                for idx, line in ctrl.activities if line.checked
                                    path.horizontal-line(d="M0,#{idx * ctrl.laneWidth} L9999999,#{idx * ctrl.laneWidth}")
                            
                            for idx, occ in ctrl.data
                                g.occurence(style={transform: "translateX(#{occ.offset * ctrl.arrowDist}px)"})
                                    for arr in occ.arrows if arr.enabled
                                        @on('click', ctrl.arrowClick(idx, occ, arr))
                                        path.arrow(marker-end="url(#arrow-head)",
                                                   marker-start="url(#arrow-tail)",
                                                   d="M#{(arr.left + 1) * ctrl.arrowDist},#{arr.from * ctrl.laneWidth} L#{(arr.left + 1) * ctrl.arrowDist},#{arr.to * ctrl.laneWidth}")
                                    if idx
                                        path.vertical-line(d="M0,0 L0,#{(ctrl.activities.length - 1) * ctrl.laneWidth}")
